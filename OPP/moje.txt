   // calcHSL() {
    //     let {r, g, b} = this

    //     r /= 255
    //     b /= 255
    //     g /= 255

    //     let cmin = Math.min(r, g, b)
    //     let cmax = Math.max(r, g, b)
    //     let delta = cmax - cmin
    //     let h = 0
    //     let l = 0
    //     let s = 0
    //     if (delta == 0) {
    //         h = 0
    //     } else if (cmax == r) {
    //         h = ((g - b) / delta) % 6
    //     } else if (cmax == g) {
    //         h = (b - r) / delta + 2
    //     } else {
    //         h = (r - g) / delta + 4
    //     }

    //     h = math.round(h * 60)

    //     if (h < 0) h += 360
    //     l = (cmax + cmin) / 2
    //     s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1))
    //     s = +(s * 100).toFixed(1)
    //     l = +(l * 100).toFixed(1)
    //     return[h, l, s]
    // }


    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   // kopirano

       // calcHSL() {
	// 	let { r, g, b } = this;
	// 	// Make r, g, and b fractions of 1
	// 	r /= 255;
	// 	g /= 255;
	// 	b /= 255;

	// 	// Find greatest and smallest channel values
	// 	let cmin = Math.min(r, g, b),
	// 		cmax = Math.max(r, g, b),
	// 		delta = cmax - cmin,
	// 		h = 0,
	// 		s = 0,
	// 		l = 0;
	// 	if (delta == 0) h = 0;
	// 	else if (cmax == r)
	// 		// Red is max
	// 		h = ((g - b) / delta) % 6;
	// 	else if (cmax == g)
	// 		// Green is max
	// 		h = (b - r) / delta + 2;
	// 	else
	// 		// Blue is max
	// 		h = (r - g) / delta + 4;

	// 	h = Math.round(h * 60);

	// 	// Make negative hues positive behind 360Â°
	// 	if (h < 0) h += 360;
	// 	// Calculate lightness
	// 	l = (cmax + cmin) / 2;

	// 	// Calculate saturation
	// 	s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));

	// 	// Multiply l and s by 100
	// 	s = +(s * 100).toFixed(1);
	// 	l = +(l * 100).toFixed(1);
	// 	this.h = h;
	// 	this.s = s;
	// 	this.l = l;
    // }